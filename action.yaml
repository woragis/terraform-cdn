name: 'Terraform AWS CloudFront'
description: 'Configure CloudFront using Terraform'

inputs:
  project-name:
    description: 'The project name used for naming resources and tags'
    required: true

  root-domain:
    description: 'The main domain for the application (e.g., "example.com")'
    required: true

  terraform-dir:
    description: 'Directory where the Terraform code is located'
    required: true

  aws-region:
    description: 'AWS region for deployment'
    required: false
    default: 'us-east-1'

  subdomain:
    description: 'Subdomain (e.g., app or www)'
    required: false
    default: 'app'

  environment:
    description: 'Deployment environment (e.g., dev, prod, staging)'
    required: false
    default: 'dev'

  origin-domain-name:
    description: 'Origin domain name (typically S3 static site bucket domain)'
    required: true

  cloudfront-distribution-name:
    description: 'Custom CloudFront distribution name'
    required: false
    default: 'null'

  ssl-minimum-protocol-version:
    description: 'The minimum TLS version CloudFront accepts'
    required: false
    default: 'TLSv1.2_2021'

  tags:
    description: 'Extra tags for resources (JSON string)'
    required: false
    default: '{}'

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.5.0'

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ inputs.aws-region }}

    - name: Terraform Init
      run: terraform init
      shell: bash
      working-directory: ${{ inputs.terraform-dir }}

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan \
          -var="project_name=${{ inputs.project-name }}" \
          -var="root_domain=${{ inputs.root-domain }}" \
          -var="subdomain=${{ inputs.subdomain }}" \
          -var="aws_region=${{ inputs.aws-region }}" \
          -var="environment=${{ inputs.environment }}" \
          -var="origin_domain_name=${{ inputs.origin-domain-name }}" \
          -var="cloudfront_distribution_name=${{ inputs.cloudfront-distribution-name }}" \
          -var="ssl_minimum_protocol_version=${{ inputs.ssl-minimum-protocol-version }}" \
          -var='tags=${{ inputs.tags }}' \
          -out=tfplan
      shell: bash
      working-directory: ${{ inputs.terraform-dir }}

    - name: Terraform Apply with Retry
      id: apply
      continue-on-error: true
      run: |
        for attempt in {1..5}; do
          if terraform apply -auto-approve tfplan; then
            echo "apply_success=true" >> $GITHUB_ENV
            break
          else
            sleep 120
            if [ $attempt -eq 5 ]; then
              echo "apply_success=false" >> $GITHUB_ENV
              exit 1
            fi
          fi
        done
      shell: bash
      working-directory: ${{ inputs.terraform-dir }}

    - name: Terraform Destroy on Failure
      if: env.apply_success == 'false'
      run: |
        terraform destroy -auto-approve \
          -var="project_name=${{ inputs.project-name }}" \
          -var="root_domain=${{ inputs.root-domain }}" \
          -var="subdomain=${{ inputs.subdomain }}" \
          -var="aws_region=${{ inputs.aws-region }}" \
          -var="environment=${{ inputs.environment }}" \
          -var="origin_domain_name=${{ inputs.origin-domain-name }}" \
          -var="cloudfront_distribution_name=${{ inputs.cloudfront-distribution-name }}" \
          -var="ssl_minimum_protocol_version=${{ inputs.ssl-minimum-protocol-version }}" \
          -var='tags=${{ inputs.tags }}'
      shell: bash
      working-directory: ${{ inputs.terraform-dir }}

    - name: Get Terraform Outputs
      if: env.apply_success == 'true'
      id: outputs
      shell: bash
      run: |
        echo "cloudfront_domain_name=$(terraform output -raw cloudfront_domain_name)" >> $GITHUB_ENV
        echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_ENV
        echo "certificate_arn=$(terraform output -raw certificate_arn)" >> $GITHUB_ENV
      working-directory: ${{ inputs.terraform-dir }}

    - name: Set Action Outputs
      shell: bash
      run: |
        echo "::set-output name=cloudfront_domain_name::${{ env.cloudfront_domain_name }}"
        echo "::set-output name=cloudfront_distribution_id::${{ env.cloudfront_distribution_id }}"
        echo "::set-output name=certificate_arn::${{ env.certificate_arn }}"
      working-directory: ${{ inputs.terraform-dir }}

outputs:
  cloudfront_domain_name:
    description: 'The CloudFront distribution domain name (e.g., d123...cloudfront.net)'
    value: ${{ steps.outputs.outputs.cloudfront_domain_name }}
  cloudfront_distribution_id:
    description: 'The CloudFront distribution ID for cache invalidation'
    value: ${{ steps.outputs.outputs.cloudfront_distribution_id }}
  certificate_arn:
    description: 'The ARN of the ACM certificate'
    value: ${{ steps.outputs.outputs.certificate_arn }}
